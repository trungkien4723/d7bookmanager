<?php
/**
 * Implements hook_menu().
 */
function book_menu()
{
  $item = array();

  $item['api/v1/books'] = array(
    'page callback' => 'process_books_request',
    'access callback' => TRUE,
  );

  $item['api/v1/books/%'] = array(
    'page callback' => 'process_book_request',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );

  return $item;
}

/**
 * process functions by method
 */
function process_book_request($nid){
  $request = OAuth2\Request::createFromGlobals();

  switch (strtoupper($_SERVER['REQUEST_METHOD'])){
    case 'GET':
      book_index($nid);
      break;
    case 'POST':
      book_update($nid, $request->request);
      break;
    case 'DELETE':
      book_delete($nid);
      break;
  }
}

/**
 * process functions by method
 */
function process_books_request(){
  $request = OAuth2\Request::createFromGlobals();
  switch (strtoupper($request->server['REQUEST_METHOD'])){
    case 'GET':
      book_all($_REQUEST);
      break;
    case 'POST':
      book_create($request->request);
      break;
  }
}

/**
 * selecting a book by nid
 */
function book_index($nid)
{
  $node = node_load($nid);

  drupal_json_output(book_fields_render($node));
}

/**
 * selecting all books
 */
function book_all($request = null)
{
  $nodes = array();
  $items_per_page = 20;
  $current_page = isset($_GET['page']) ? $_GET['page'] : 1;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'book')
    ->propertyCondition('status', 1);
  if(!empty($request['title'])){$query->propertyCondition('title', '%'.$request['title'].'%', 'like');}
  if(!empty($request['author'])){$query->fieldCondition('field_author', 'tid', $request['author']);}
  if(!empty($request['categories'])){$query->fieldCondition('field_categories', 'tid', $request['categories']);}
  if(!empty($request['publisher'])){$query->fieldCondition('field_publisher', 'tid', $request['publisher']);}
  if(!empty($request['published_year'])){$query->fieldCondition('field_published_year', 'tid', $request['published_year']);}

  $clone_query = clone $query;
  $total = intval($clone_query->count()->execute());
  $result = $query->range(($current_page - 1) * $items_per_page ,$items_per_page)->execute();

  if (isset($result['node'])) {
    $items_nids = array_keys($result['node']);
    $nodes = node_load_multiple($items_nids);
  }

  $current_path = url(current_path(), array('absolute' => true));
  $previous_page = $current_page - 1 <= 0 ? null : $current_path . ($current_page > 2 ? '?page=' . ($current_page - 1) : '');
  $next_page = $current_path . '?page=' . ($current_page + 1);

  $data = array(
    'meta' => array(
      'pagination' => array(
        'total' => $total,
        'pages' => floor($total / $items_per_page),
        'page' => $current_page,
        'limit' => $items_per_page,
        'links' => array(
          'previous' => $previous_page,
          'current' => $current_path . ($current_page > 1 ? '?page=' . $current_page : ''),
          'next' => $next_page,
        ),
      )
    ),
    'data' => books_fields_render($nodes),
  );

  drupal_json_output($data);
}

/**
 * create a book
 */
function book_create($request = null)
{
  $node = new stdClass();
  $node->type = 'book';
  $node->language = LANGUAGE_NONE;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 2;

  //Title
  $node->title = $request['title'];
  //Description
  $node->field_description[$node->language][0]['value'] = $request['description'];
  //Categories
  $node->field_categories[$node->language] = array();
  foreach ($request['categories'] as $category){
    $node->field_categories[$node->language][] = array('tid' => $category);
  }
  //Author
  $node->field_author[$node->language][0]['tid'] = $request['author'];
  //Publisher
  $node->field_publisher[$node->language][0]['tid'] = $request['publisher'];
  //Published year
  $node->field_published_year[$node->language][0]['tid'] = $request['published_year'];

  node_save($node);
  drupal_json_output($node);
}

/**
 * edit infomations of a book
 */
function book_update($nid, $request = null)
{
  $node = node_load($nid);
  if($node && $node->type == 'book')
  {
    //Title
    $node->title = $request['title'];
    //Description
    $node->field_description[$node->language][0]['value'] = $request['description'];
    //Categories
    $node->field_categories[$node->language] = array();
    foreach ($request['categories'] as $category){
      $node->field_categories[$node->language][] = array('tid' => $category);
    }
    //Author
    $node->field_author[$node->language][0]['tid'] = $request['author'];
    //Publisher
    $node->field_publisher[$node->language][0]['tid'] = $request['publisher'];
    //Published year
    $node->field_published_year[$node->language][0]['tid'] = $request['published_year'];
    node_save($node);
    drupal_json_output($node);
  }
  else{print_r("Book not exists");}
}

/**
 * delete a book
 */
function book_delete($nid)
{
  $node = node_load($nid);
  if($node && $node->type == 'book')
  {
    drupal_json_output($node);
    node_delete($nid);
  }
  else{print_r("Book not exists");}
}

/**
 * Display fields of multiple books
 */
function books_fields_render($nodes){
  if($nodes){
    $data = array();
    foreach ($nodes as $node){
      $categories = array();
      foreach ($node->field_categories[$node->language] as $key => $items){
        array_push($categories, taxonomy_term_load($items['tid'])->name);
      }
      $publisher = taxonomy_term_load($node->field_publisher[$node->language][0]['tid'])->name;
      $publishedyear = taxonomy_term_load($node->field_published_year[$node->language][0]['tid'])->name;
      $json = array(
        'id' => $node->nid,
        'Title' => $node->title,
        'Categories' => $categories,
        'Publisher' => $publisher,
        'Published year' => $publishedyear,
      );
      array_push($data, $json);
    }
    return $data;
  }
}

/**
 * Display fields of a book
 */
function book_fields_render($node){
  if($node){
    $data = array();

    $categories = array();
    foreach ($node->field_categories[$node->language] as $key => $items){
      array_push($categories, taxonomy_term_load($items['tid'])->name);
    }
    $publisher = taxonomy_term_load($node->field_publisher[$node->language][0]['tid'])->name;
    $publishedyear = taxonomy_term_load($node->field_published_year[$node->language][0]['tid'])->name;
    $json = array(
      'id' => $node->nid,
      'Title' => $node->title,
      'Categories' => $categories,
      'Publisher' => $publisher,
      'Published year' => $publishedyear,
    );
    array_push($data, $json);

    return $data;
  }
}
